package com.sharpnew.day05.demo01;

/**
 * @description:
 * @program: demobase
 * @author: Charles
 * @created: 2020-05-02 16:08
 **/
/*
数组： 是一种容器，可以同时存放多个数据值

数组特点：
1. 数组是一种引用数据类型
2.数据当中的多个数据，类型必须统一。
3.数组的长度在程序运行期间不可改变
ps：数组一旦创建之后，长度就不能修改

两种常见的初始化方式
1. 动态初始化（指定长度）:在创建数组的时候，直接指定数组当中的数据元素个数
2.静态初始化（指定内容）:在创建数组的时候，不直接指定数据个数多少，而是直接将具体的数据内容进行指定

动态初始化数组的格式：
数据类型[] 数组名称=new 数据类型[数组长度];

静态初始化：
数据类型[] 数组名称=new 数据类型[]{元素1,元素2,...}

省略格式：
数据类型[] 数组名称={元素1,元素2,...}


解析含义：
左侧数据类型：也就是数据当中保存的数据，全部都是统一的什么类型
左侧的中括号：代表是一个数组
左侧数组名称：给数组取一个名字
右侧的new：代表创建数组的动作
右侧数据类型：必须和左边的数据类型保持一致
右侧中括号的长度： 也就是数组当中，到底可以保存多少个数据，是要给int数字


注意事项：
1. 静态初始化没有直接指定长度，但是仍然会自动推算得到长度
2. 静态初始化标准格式可以拆分成为两个步骤
  2.1 String[] arrayString;
      arrayString=new arrayString[100];
3. 动态初始化也可以拆分成为两个步骤
4. 静态初始化一旦使用省略格式，就不能拆分成为两个步骤

使用建议：
如果不确定数组当中的具体内容，用动态初始化；否则，已经确定了具体内容，用静态初始化
 */

public class Demo01Array {
  public static void main(String[] args) {
    //动态初始化
    //创建一个数组
    //格式：数据类型[] 数组名称=new 数据类型[数组长度]
    int[] arrayA = new int[300];
    double[] arrayB = new double[100];
    String[] arrayC = new String[300];
    //静态初始化
    int[] arrayD = new int[]{15, 23};
    String[] arrayE = new String[]{"charles", "jack","make"};

    //省略格式
    String[] arrayF = {"charles", "jack","make"};
  }
}
